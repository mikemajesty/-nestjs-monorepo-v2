{
  "Create Usecase Test": {
    "scope": "javascript,typescript",
    "prefix": "apitest",
    "body": [
      "import { Test } from '@nestjs/testing';",
      "import { ZodIssue } from 'zod';",
      "$2",
      "import { TestUtils } from '@/utils/tests';",
      "import { IUsecase } from '@/utils/usecase';",
      "$2",
      "import {",
      "  ${TM_FILENAME_BASE/([a-zA-Z]+)-?([a-zA-Z]*)-?([a-zA-Z]*)-?([a-zA-Z]*)?-?([a-zA-Z]*)?-?([a-zA-Z]*)?(?=\\.spec).*/${1:/capitalize}${2:/capitalize}${3:/capitalize}${4:/capitalize}${5:/capitalize}${6:/capitalize}${7:+ }/}Input,",
      "  ${TM_FILENAME_BASE/([a-zA-Z]+)-?([a-zA-Z]*)-?([a-zA-Z]*)-?([a-zA-Z]*)?-?([a-zA-Z]*)?-?([a-zA-Z]*)?(?=\\.spec).*/${1:/capitalize}${2:/capitalize}${3:/capitalize}${4:/capitalize}${5:/capitalize}${6:/capitalize}${7:+ }/}Usecase",
      "} from '../${TM_FILENAME_BASE/(?=\\.spec).*/${1:+ }/}';",
      "$2",
      "describe(${TM_FILENAME_BASE/([a-zA-Z]+)-?([a-zA-Z]*)-?([a-zA-Z]*)-?([a-zA-Z]*)?-?([a-zA-Z]*)?-?([a-zA-Z]*)?(?=\\.spec).*/${1:/capitalize}${2:/capitalize}${3:/capitalize}${4:/capitalize}${5:/capitalize}${6:/capitalize}${7:+ }/}Usecase.name, () => {",
      "  let usecase: IUsecase;",
      "$3",
      "  beforeEach(async () => {",
      "    const app = await Test.createTestingModule({",
      "      imports: [],",
      "      providers: [",
      "        {",
      "          provide: IUsecase,",
      "          useFactory: () => {",
      "            return new ${TM_FILENAME_BASE/([a-zA-Z]+)-?([a-zA-Z]*)-?([a-zA-Z]*)-?([a-zA-Z]*)?-?([a-zA-Z]*)?-?([a-zA-Z]*)?(?=\\.spec).*/${1:/capitalize}${2:/capitalize}${3:/capitalize}${4:/capitalize}${5:/capitalize}${6:/capitalize}${7:+ }/}Usecase();",
      "          },",
      "          inject: []",
      "        }",
      "      ]",
      "    }).compile();",
      "$4",
      "    usecase = app.get(IUsecase);",
      "  });",
      "$5",
      "  test('when no input is specified, should expect an error', async () => {",
      "    await TestUtils.expectZodError(",
      "      () => usecase.execute({} as ${TM_FILENAME_BASE/([a-zA-Z]+)-?([a-zA-Z]*)-?([a-zA-Z]*)-?([a-zA-Z]*)?-?([a-zA-Z]*)?-?([a-zA-Z]*)?(?=\\.spec).*/${1:/capitalize}${2:/capitalize}${3:/capitalize}${4:/capitalize}${5:/capitalize}${6:/capitalize}${7:+ }/}Input),",
      "      (issues: ZodIssue[]) => {",
      "        expect(issues).toEqual([]);",
      "      }",
      "    );",
      "  });",
      "});",
      "$6"
    ],
    "description": "Create usecase test"
  }
}
